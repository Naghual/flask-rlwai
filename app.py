# flask-rlwai

import os
import psycopg2
import secrets
import time
import imghdr
import bcrypt
import base64
import logging
from flask import Flask, jsonify, request, send_from_directory
from psycopg2.extras import RealDictCursor
from datetime import datetime
from typing import Dict, List, Tuple, Optional
from functools import wraps
from dotenv import load_dotenv  # –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞


# –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ, –∞ –Ω–µ –≤ Railway ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
if os.environ.get("RAILWAY_ENVIRONMENT") is None:
    load_dotenv()

app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–∑–∞–º–µ–Ω–∞ print)
logging.basicConfig(level=logging.DEBUG)
log = logging.getLogger(__name__)

bDebug = False
bDebug2= False

# –î–æ—Å—Ç—É–ø–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –º–æ–≤ —Ç–∞ –≤–∞–ª—é—Ç
VALID_LANGS         = {'ua', 'pl', 'en', 'ru'}
VALID_CURRENCIES    = {'uah', 'pln', 'usd', 'eur'}
DEFAULT_LANG        = 'ua'
DEFAULT_CURRENCY    = 'uah'
DEFAULT_PAGE_LIMIT  = 50
MAX_PAGE_LIMIT      = 250



# ==============================================================
# --------------------------------------------------------------
# üîê –ó–≤–∏—á–∞–π–Ω–∞ –±–∞–∑–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ —Ç–æ–∫–µ–Ω—ñ–≤

# USERS = {"admin": "1234"}
# TOKENS = {}  # token -> (username, expiry)
TOKEN_TTL = 172800  # 48 –≥–æ–¥–∏–Ω
# TOKENS["tokenstring"] = [user_id, user_login, user_name, token_expire_date]
TOKENS = {}



# ==============================================================
# --------------------------------------------------------------
# üíæ –§—É–Ω–∫—Ü—ñ—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î, –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∑ –∫–æ–∂–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç—É, –¥–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è –¥–æ –±–∞–∑–∏

def get_db_connection():
    db_url = os.getenv("DATABASE_URL")  # –ß–∏—Ç–∞–µ–º URL –±–∞–∑—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not db_url:
        raise RuntimeError("DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω–∞.")
    return psycopg2.connect(db_url)


# ==============================================================
# --------------------------------------------------------------
# üîê –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
def require_auth(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        auth = request.headers.get('Authorization', '')
        if not auth.startswith('Bearer '):
            return jsonify({"error": "Authorization header missing"}), 401

        token = auth.split(' ')[1]
        # user_data = TOKENS.get(token)
        if token in TOKENS:
            user_data = TOKENS[token]
        else:
            return jsonify({"error": "Invalid or expired token"}), 401

        # if not user_data:
        #    return jsonify({"error": "Invalid or expired token"}), 401

        # username, expiry = user_data
        user_id, user_login, user_name, token_expire_date = user_data

        if time.time() > token_expire_date:
            del TOKENS[token]
            return jsonify({"error": "Token expired"}), 401

        request.user_id     = user_id
        request.user_login  = user_login
        request.user_name   = user_name

        return f(*args, **kwargs)

    return decorated


# --------------------------------------------------------------
# üîê –¢–æ—á–∫–∞ –≤—Ö–æ–¥—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É
@app.route('/login', methods=['POST'])
def login():

    if bDebug:
        print('+++ Login')

    data = request.get_json()
    if not data:
        return jsonify({"error": "Invalid JSON"}), 400

    username = data.get('username', '').lower()
    password = data.get('password', '').lower()

    if not username or not password:
        return jsonify({"error": "Missing username or password"}), 400

    if bDebug2:
        print(f'    username: {username}; password: {password}')

    try:
        conn = get_db_connection()
        cur = conn.cursor()

        sql = """
            select usr.id, usr.login, usr.first_name, usr.last_name, usr.phone
            from customers usr
            where   usr.enabled = true 
                and usr.login = %s 
                and usr.phrase = %s"""

        params = [username, password]
        cur.execute(sql, params)
        row = cur.fetchone()
        rows_count = cur.rowcount

        if bDebug2:
            print(f'    data fetched: {row}')

        if rows_count == 1:
            token = secrets.token_hex(16)
            TOKENS[token] = [row[0], row[1], row[2] + " " + row[3], time.time() + TOKEN_TTL]
            cur.close()
            conn.close()
            if bDebug:
                print('    TOKEN Result: ', TOKENS[token])
            
            return jsonify(
                {
                    "token" : token,
                    "user"  : row[2] + " " + row[3],
                    "phone" : row[4]
                })

        else:
            cur.close()
            conn.close()
            return jsonify({"error": "Invalid credentials"}), 401

    except Exception as e:
        #cur.close()
        #conn.close()
        return jsonify({"error": str(e)}), 500  # –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞

    # if USERS.get(username) != password:
    #     return jsonify({"error": "Invalid credentials"}), 401

    # token = secrets.token_hex(16)
    # TOKENS[token] = (username, time.time() + TOKEN_TTL)

    # return jsonify({"token": token})


# ==============================================================
# --------------------------------------------------------------
@app.route("/languages")
@require_auth
def get_languages():

    print(f'+++/languages: user: {str(request.user_id)}')

    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("SELECT code, title FROM public.languages ORDER BY title;")
        rows = cur.fetchall()
        rows_count = cur.rowcount
        cur.close()
        conn.close()

        datarows = [
            {"code": row[0].strip(), "title": row[1]}
            for row in rows
        ]

        data = {
            "count": rows_count,
            "languages": datarows
        }

        return jsonify(data), 200

    except Exception as e:
        return jsonify({"error": str(e)}), 500


# ==============================================================
# --------------------------------------------------------------
@app.route("/currencies")
@require_auth
def get_currencies():

    print(f'+++/currencies: user: {str(request.user_id)}')

    lang = request.args.get('lang', 'ua').lower()
    if lang not in ['ua', 'pl', 'en', 'ru']:
        lang = 'ua'

    col_title = 'title_' + lang

    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("SELECT code, " + col_title + " FROM public.currencies ORDER BY code;")

        rows = cur.fetchall()
        rows_count = cur.rowcount
        cur.close()
        conn.close()

        datarows = [
            {"code": row[0].strip(), "title": row[1]}
            for row in rows
        ]

        data = {
            "count": rows_count,
            "currencies": datarows
        }

        return jsonify(data), 200

    except Exception as e:
        return jsonify({"error": str(e)}), 500


# ==============================================================
# --------------------------------------------------------------
# üìó –ó–∞–ø–∏—Ç —Ç–æ–≤–∞—Ä–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
@app.route("/categories")
@require_auth
def get_categories():

    bDebug = True

    if bDebug:
        print(f'+++ Get Categories: user: {str(request.user_id)}')

    lang = request.args.get('lang', 'ua').lower()
    if lang not in ['ua', 'pl', 'en', 'ru']:
        lang = 'ua'

    col_title = 'title_' + lang

    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("""
            SELECT 
              c.id, 
              c.code, 
              c.""" + col_title + """, 
              COUNT(p.id) as ProductCount
            FROM 
                Categories c
            LEFT JOIN 
                Products p ON c.code = p.category_code
            GROUP BY 
                c.id, c."""+col_title+""" 
            ORDER BY c.code;""")

        rows = cur.fetchall()
        rows_count = cur.rowcount
        cur.close()
        conn.close()

        if bDebug2:
            print(f'    data fetched: {str(rows_count)} rows')

        datarows = [
            {"id": row[0], "code": row[1].strip(), "title": row[2], "prod_count": row[3]}
            for row in rows
        ]

        data = {
            "count": rows_count,
            "categories": datarows
        }

        return jsonify(data), 200

    except Exception as e:
        return jsonify({"error": str(e)}), 500


# ==============================================================
# --------------------------------------------------------------
# üì¶ –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ [GET]
#    –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–µ—Ä–µ–ª—ñ–∫ —Ç–æ–≤–∞—Ä—ñ–≤.
#    –¢–∞–∫–æ–∂, –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ñ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–¥–ø–æ—Ä—è–¥–∫–æ–≤–∏–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤.
# –ö–æ–≥–¥–∞ —Ç—ã —Å—Ç—É—á–∏—à—å—Å—è –∫ –∞–ø–ø–∫–µ GET-–∑–∞–ø—Ä–æ—Å–æ–º –ø–æ –∞–¥—Ä–µ—Å—É https://<–∞–ø–ø–∫–∞>/products
# —Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–ø–∏—Å–∞–Ω–∞ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ä–æ—É—Ç–∞ "@app.route('/products', methods=['GET'])"
# –í –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ - get_products()
# –¢–∞–∫ –≤–æ —Ñ–ª–∞—Å–∫–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ –≤—Å—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è
@app.route('/products', methods=['GET'])
@require_auth
def get_products():

    user_id = request.user_id
    log.debug(f"+++/products: user: {user_id}")

    # === –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø–∞—Ä—Å–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ===
    try:
        req_start = max(0, int(request.args.get('start', 0)))
        req_limit = min(MAX_PAGE_LIMIT, max(1, int(request.args.get('limit', DEFAULT_PAGE_LIMIT))))  # –æ–≥—Ä–∞–Ω–∏—á–∏–º —Å–≤–µ—Ä—Ö—É
    except ValueError:
        return jsonify({"error": "Invalid start or limit"}), 400
    
    req_category = request.args.get('category', '').strip().lower()
    if len(req_category) > 50:  # –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
        return jsonify({"error": "Category too long"}), 400
    
    req_currency = request.args.get('currency', DEFAULT_CURRENCY).lower()
    if req_currency not in VALID_CURRENCIES:
        req_currency = DEFAULT_CURRENCY
    
    req_lang = request.args.get('lang', DEFAULT_LANG).lower()
    if req_lang not in VALID_LANGS:
        req_lang = DEFAULT_LANG
    
    col_title = f"title_{req_lang}"
    col_descr = f"descr_{req_lang}"

    log.debug(f"Params: start={req_start}, limit={req_limit}, category={req_category}, currency={req_currency}, lang={req_lang}")



    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor(cursor_factory=RealDictCursor)  # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict

        # -- –≤–∞–∂–Ω–æ: —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤ –∑–∞–ø—Ä–æ—Å–µ
        base_sql = f"""
            SELECT 
                p.id AS product_id,
                c.code AS category_name,
                p.{col_title} AS product_title,
                p.{col_descr} AS product_descr,
                COALESCE(pl.price, 0) AS price,
                COALESCE(pl.stock_quantity, 0) AS quantity,
                p.code AS product_code,
                p.is_variative
            FROM products p
            LEFT JOIN categories c ON p.category_code = c.code
            LEFT JOIN price_list pl ON p.code = pl.product_code AND pl.currency_code = %s
            WHERE p.is_active = TRUE  
        """
        params = [req_currency]

        if req_category:
            base_sql += " AND c.code = %s"
            params.append(req_category)

        base_sql += f" ORDER BY c.code, p.{col_title} LIMIT %s OFFSET %s"
        params.extend([req_limit, req_start])

        
        cur.execute(base_sql, params)
        rows = cur.fetchall()
        total_fetched = len(rows)

        log.debug(f"    Fetched {total_fetched} products from DB")


        # === –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º ===
        product_codes = [row['product_code'] for row in rows]
        image_map = _fetch_image_paths_bulk(product_codes)


       # === –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ ===
        products = []
        for row in rows:
            code = row['product_code']
            products.append({
                'id'            : row['product_id'],
                'category'      : row['category_name'] or '',
                'title'         : row['product_title'] or '',
                'description'   : row['product_descr'] or '',
                'price'         : float(row['price']),
                'quantity'      : int(row['quantity']),
                'image'         : image_map.get(code, ''),
                'measure'       : '',
                'is_variative'  : bool(row['is_variative'])
            })

        response = {
            "currency"  : req_currency,
            "count"     : total_fetched,
            "start"     : req_start,
            "limit"     : req_limit,
            "products"  : products
        }

        return jsonify(response), 200

    except Exception as e:
        log.error(f"Error in get_products: {e}", exc_info=True)
        return jsonify({"error": "Internal server error"}), 500
    finally:
        if conn:
            conn.close()
    



# --------------------------------------------------------------
# üì¶ –ó–∞–ø–∏—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É
@app.route('/products/<int:product_id>', methods=['GET'])
@require_auth
def get_product(product_id):
    
    if bDebug:
        print('+++/products: user:' + str(request.user_id) + ' ; product_id:' + str(product_id))
    
    # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—ñ—Å—Ç—å –ê–π–î–∏ —Ç–æ–≤–∞—Ä—É
    # product_id = request.args.get('product_id', 0)
    if product_id == 0:
        return jsonify({"message": "No product ID specified"}), 400

    # –±–∞–∂–∞–Ω–∞ –≤–∞–ª—é—Ç–∞, –∞–±–æ —î–≤—Ä–æ
    req_currency = request.args.get('currency', 'uah').lower()

    # –±–∞–∂–∞–Ω–∞ –º–æ–≤–∞, –∞–±–æ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞
    req_lang = request.args.get('lang', 'ua').lower()
    if req_lang not in ['ua', 'pl', 'en', 'ru']:
        req_lang = 'ua'
    # –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∞ –Ω–∞–∑–≤–∞ –∫–æ–ª–æ–Ω–æ–∫
    col_title = 'title_' + req_lang
    col_descr = 'descr_' + req_lang


    if bDebug:
        print('    currency:' + req_currency + '; lang:' + req_lang)

    # 1
    # –æ—Ç—Ä–∏–º–∞—î–º–æ –¥–∞–Ω–Ω—ñ –ø—Ä–æ —Ç–æ–≤–∞—Ä
    try:
        # –ó–∞–ø–∏—Ç –¥–æ –ë–î
        conn = get_db_connection()
        cur = conn.cursor()
        sql = """
            select 
                p.id,
                p.code,
                c.id AS category_id,
                c.code AS category,
                p.is_active AS active,
                p.""" + col_title + """ AS title,
                p.""" + col_descr + """ AS description,
                p.updated_at,
                COALESCE(pl.price, 0) AS price,
                COALESCE(pl.stock_quantity, 0) AS quantity, 
                COALESCE(ENCODE(i.img_data, 'base64'), '') AS img_data 
            FROM Products p
            LEFT JOIN categories c ON p.category_code = c.code
            LEFT JOIN price_list pl ON pl.product_code = p.code AND pl.currency_code = %s
            LEFT JOIN images i ON i.product_code = p.code
            WHERE p.id = %s"""

        cur.execute(sql, (req_currency, product_id))
        rows = cur.fetchall()
        rows_count = cur.rowcount

        product_code = rows[0][1]
        category_id  = rows[0][2]

        # –î–∏—Å–∫–æ–Ω–Ω–µ–∫—Ç –≤—ñ–¥ –ë–î
        cur.close()
        conn.close()
        
        if bDebug:
            print('    rows fetched: ' + str(rows_count))

    except Exception as e:
        print('!!! error1: ' + str(e))
        return jsonify({"error (1): ": str(e)}), 500  # –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞

    # –º–∞—î –±—É—Ç–∏ –ª–∏—à–µ –æ–¥–∏–Ω!
    if rows_count == 0:
        return jsonify({"no records found"}), 404  # –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞

    if rows_count != 1:
        return jsonify({"records more than expected"}), 500  # –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞

    # –æ—Ç—Ä–∏–º–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É
    try:
        # –ó–∞–ø–∏—Ç –¥–æ –ë–î
        conn = get_db_connection()
        cur = conn.cursor()
        sql = """
            SELECT 
                ENCODE(i.img_data, 'base64') AS img_data 
            FROM images i
            WHERE i.product_code = %s
            ORDER BY i.id"""

        cur.execute(sql, (product_code,))
        img_rows = cur.fetchall()
        # img_count = cur.rowcount

        # –î–∏—Å–∫–æ–Ω–Ω–µ–∫—Ç –≤—ñ–¥ –ë–î
        cur.close()
        conn.close()

    except Exception as e:
        print('!!! error2: ' + str(e))
        return jsonify({"error (2): ": str(e)}), 500  # –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞

    try:

        # –ó–∞–Ω–æ—Å–∏–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É –º–∞—Å–∏–≤
        images = []
        for row in img_rows:
            images.append({'image': row[0] or ''})
        if bDebug:
            print('    images appended.')

        # –ó–∞–Ω–æ—Å–∏–º–æ –¥–∞–Ω–Ω—ñ
        first_row = rows[0]
        data = {
            "id": first_row[0],
            "category_id": first_row[2],
            "category": first_row[3],
            "active": first_row[4],
            "title": first_row[5],
            "description": first_row[6],
            "image": first_row[10],  # –£–∂–µ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ –≤ base64
            "quantity": first_row[9],
            "price": first_row[8],
            "images": images
        }
        
        if bDebug:
            print('    data packed.')

        return jsonify(data), 200


    except Exception as e:
        print('!!! error3: ' + str(e))
        return jsonify({"error (3): ": str(e)}), 500  # –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞


# ==============================================================
# --------------------------------------------------------------
# üõí –ó–∞–ø–∏—Ç –∫–æ—à–∏–∫–∞
@app.route("/cart")
@require_auth
def get_cart():
    # print('request.user_id : ', request.user_id)

    # –±–∞–∂–∞–Ω–∞ –º–æ–≤–∞, –∞–±–æ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞
    req_lang = request.args.get('lang', 'ua').lower()
    if req_lang not in ['ua', 'pl', 'en', 'ru']:
        req_lang = 'ua'

    # –±–∞–∂–∞–Ω–∞ –≤–∞–ª—é—Ç–∞, –∞–±–æ —î–≤—Ä–æ
    req_currency = request.args.get('currency', 'uah').lower()

    # –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∞ –Ω–∞–∑–≤–∞ –∫–æ–ª–æ–Ω–æ–∫
    col_title = 'title_' + req_lang
    col_descr = 'descr_' + req_lang

    try:
        conn = get_db_connection()
        cur = conn.cursor()
        # cur.execute("SELECT id, code, " + col_title + " FROM public.categories ORDER BY id;")

        sql = """
            select 
                c.id,
                c.customer_id,
                c.product_id,
                pr.category_id,
                cat.code,
                pr.""" + col_title + """ as title,
                pr.""" + col_descr + """ as description,
                i.img_data,
                c.quantity,
                pl.price,
                c.quantity * pl.price as summ 
            from carts c 
            inner join products pr ON pr.id = c.product_id
            inner join price_list pl ON pl.product_id = c.product_id AND pl.currency_code = '""" + req_currency + """'
            inner join categories cat ON cat.id = pr.category_id
            left join images i ON i.product_id = c.product_id
            where c.customer_id = """ + str(request.user_id)

        cur.execute(sql)

        rows = cur.fetchall()
        rows_count = cur.rowcount
        cur.close()
        conn.close()

        # –ü—Ä–∏–∫–ª–∞–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ:
        # {
        #     "count"   : 1,
        #     "total"   : 2.5,
        #     "products": [
        #         {
        #             "id"          : 719,
        #             "category"    : "cat_profile",
        #             "title"       : "–ü—Ä–æ—Ñ—ñ–ª—å –¥–ª—è 2-—Ö —Ä—ñ–≤–Ω–µ–≤–æ—ó —Å—Ç–µ–ª—ñ –ø—ñ–¥ 45¬∞ 2,5 –º",
        #             "image"       : "storage\images\719-1.jpg",
        #             "measure"     : "—à—Ç.",
        #             "quantity"    : 1,
        #             "price"       : 2.5
        #             "summ"        : 2.5

        #         }
        #     ]
        # }

        total_summ = 0
        productsdata = []

        for row in rows:
            productsdata.append(
                {"id": row[2],
                 "category": row[4],
                 "title": row[5],
                 "image": row[7],
                 "measure": "—à—Ç.",
                 "quantity": row[8],
                 "price": row[9],
                 "summ": row[10]
                 }
            )

            total_summ = total_summ + row[10]

        data = {
            "count": rows_count,
            "total": total_summ,
            "products": productsdata
        }

        return jsonify(data), 200

    except Exception as e:
        return jsonify({"error": str(e)}), 500


# ==============================================================
# --------------------------------------------------------------
@app.route('/orders', methods=['GET'])
@require_auth
def get_orders():
    # –±–∞–∂–∞–Ω–∞ –º–æ–≤–∞, –∞–±–æ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞
    req_lang = request.args.get('lang', 'ua').lower()
    if req_lang not in ['ua', 'pl', 'en', 'ru']:
        req_lang = 'ua'

    # –±–∞–∂–∞–Ω–∞ –≤–∞–ª—é—Ç–∞, –∞–±–æ —î–≤—Ä–æ
    req_currency = request.args.get('currency', 'uah').lower()

    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        # –ó–∞–ø—Ä–æ—Å —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–æ–≤ –∏ –∏—Ö –ø–æ–∑–∏—Ü–∏–π
        cursor.execute("""
            SELECT 
                o.id,
                o.order_date,  
                o.invoice_date, 
                o.invoice_number,
                o.delivery_date, 
                o.total,
                o.status
            FROM orders o
            WHERE o.customer_id = """ + str(request.user_id) )

        orders = cursor.fetchall()

        orders_list = []

        for ordr in orders:
            orders_list.append(
                {   "id"            : ordr[0],
                    "TTN"           : ordr[3],
                    "date_ordered"  : ordr[1],
                    "date_delivered": ordr[4],
                    "status"        : ordr[6],
                    "summ"          : ordr[5]
                })

        cursor.close()
        conn.close()
        return jsonify(
            {   "count"     : len(orders_list),
                "orders"    : orders_list,  }), 200

    except Exception as e:
        return jsonify({"error": str(e)}), 500




# ==============================================================
# --------------------------------------------------------------
@app.route('/orders/<int:order_id>', methods=['GET'])
@require_auth
def get_order(order_id):
    # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—ñ—Å—Ç—å –ê–π–î–∏ —Ç–æ–≤–∞—Ä—É
    # order_id = request.args.get('order_id', 0)
    if order_id == 0:
        return jsonify({"message": "No product ID specified"}), 400

    # –±–∞–∂–∞–Ω–∞ –º–æ–≤–∞, –∞–±–æ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞
    req_lang = request.args.get('lang', 'ua').lower()
    if req_lang not in ['ua', 'pl', 'en', 'ru']:
        req_lang = 'ua'

    col_title = 'title_' + req_lang


    # –±–∞–∂–∞–Ω–∞ –≤–∞–ª—é—Ç–∞, –∞–±–æ —î–≤—Ä–æ
    req_currency = request.args.get('currency', 'uah').lower()

    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        # –ó–∞–ø—Ä–æ—Å —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–æ–≤ –∏ –∏—Ö –ø–æ–∑–∏—Ü–∏–π
        cursor.execute("""
            SELECT 
                o.id, 
                o.customer_id, 
                o.invoice_date, 
                o.invoice_number, 
                o.total,
                o.status,
                oi.id as order_item_id, 
                oi.product_id, 
                oi.quantity, 
                oi.price,
                p.""" +col_title+ """ as product_name
            FROM orders o
            LEFT JOIN order_items oi ON o.id = oi.order_id
            LEFT JOIN products p ON p.id = oi.product_id 
            WHERE o.id = %s """, (order_id,))

        orders = cursor.fetchall()

        if orders:
            orders_list = []
            current_order_id = None
            for order in orders:

                order_id, customer_id, invoice_date, invoice_number, total, status, order_item_id, product_id, quantity, price, product_name = order

                if current_order_id != order_id:
                    # –≤–∂–µ —ñ–Ω—à–∏–π –ê–π–î—ñ, –æ—Ç–∂–µ —ñ–Ω—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.
                    if current_order_id is not None:
                        # —è–∫—â–æ –ø–æ—Ç–æ—á–Ω–∏–π –ê–π–î—ñ –Ω–µ –Ω—É–ª—å–æ–≤–∏–π, –¥–æ–¥–∞–º–æ –π–æ–≥–æ –¥–æ –º–∞—Å–∏–≤—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
                        orders_list.append(current_order_data)
                    # –ø–æ—á–Ω–µ–º—É –Ω–∞–∫–æ–ø–∏—á—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ –Ω–æ–≤–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                    current_order_data = {
                        "id": order_id,
                        "TTN": invoice_number,
                        "date_ordered": invoice_date,
                        "status": status,
                        "summ": total,
                        "items": []
                    }
                    current_order_id = order_id

                # –¥–æ–¥–∞–º–æ —Å—Ç—Ä–æ–∫—É —Ç–æ–≤–∞—Ä–∞ —É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                current_order_data["items"].append({
                    "order_item_id": order_item_id,
                    "product_id": product_id,
                    "product_name": product_name,
                    "quantity": quantity,
                    "price": price
                })

            orders_list.append(current_order_data)
            cursor.close()
            conn.close()
            return jsonify(
                {
                    "count": len(orders_list),
                    "orders": orders_list,

                }), 200

        cursor.close()
        conn.close()
        return jsonify({"message": "No orders found"}), 404

    except Exception as e:
        return jsonify({"error": str(e)}), 500


# ==============================================================
# --------------------------------------------------------------
@app.route('/orders/new', methods=['POST'])
@require_auth
def create_order():
    # –î–ª—è POST-–∑–∞–ø—Ä–æ—Å–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è –Ω–µ–º–Ω–æ–≥–æ –ø–æ –¥—Ä—É–≥–æ–º—É

    # 1. –ï—Å–ª–∏ –ø—Ä–∏–ª–µ—Ç–µ–ª–æ –∏–∑ –≤–µ–±-—Ñ–æ—Ä–º—ã –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Å–∞–π—Ç–∞, —Ç–∏–ø–∞
    # <form method="POST" action="/login">
    #   <input name="username">
    #   <input name="password">
    # </form>
    # —Ç–æ –ø–æ–ª—É—á–∞–µ–º –∏—Ö —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥—ã —Ç–∏–ø–∞ username = request.form.get('username')

    # 2. –ï—Å–ª–∏ –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏—Å–ª–∞–ª–∏ JSON, –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞—é—Ç –≤ REST-–∑–∞–ø—Ä–æ—Å–∞—Ö (—ç—Ç–æ –Ω–∞—à —Å–ª—É—á–∞–π), —Ç–∏–ø–∞
    # Content-Type: application/json:
    # {
    #   "username": "Doe",
    #   "password": "secret"
    # }
    # , —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º data = request.get_json(), –æ–Ω –æ—Ç–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∏ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ –Ω–µ–º—É –¥–∞–ª—å—à–µ –≤ –∫–æ–¥–µ
    # —Ç–∞–∫ - data['username']
    # –∏–ª–∏ —Ç–∞–∫ - data.get('username')

    data = request.get_json()

    if not data     or 'products' not in data   or 'currency' not in data   or not request.user_id:
        return jsonify({"error": "Missing data"}), 400  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö

    currency = data['currency']
    products = data['products']

    if not products or not isinstance(products, list):
        return jsonify({"error": "products list is required"}), 400  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã

    #WHERE
    #o.customer_id = """ + str(request.user_id) )


    try:
        conn = get_db_connection()
        conn.autocommit = False     # manual transactions
        cursor = conn.cursor()

        try:
            # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ ID
            cursor.execute(
                "INSERT INTO orders (customer_id, order_date, status, total) VALUES (%s, CURRENT_TIMESTAMP, 'new', 1) RETURNING id;",
                (str(request.user_id),)
            )
            order_id = cursor.fetchone()[0]
        except Exception as e:
            return jsonify({"error": str(e)}), 500

        order_total = 0

        for item in products:
            
            product_id  = item.get('id')
            quantity    = item.get('quantity')
            # price     = item.get('price')
            
            try:
                cursor.execute("""
                SELECT 
                    p.id,
                    pl.price
                FROM Products p
                INNER join price_list pl ON pl.product_id = p.id AND pl.currency_code = '""" +currency+ """'
                WHERE p.id = %s""", (product_id,))

                results = cursor.fetchone()
            except Exception as e:
                return jsonify({"error": str(e)}), 500

            print('Product Results 0: ', results[0])
            price = results[1]
            print('Product Results 1: ', price)
            #price = cursor.fetchone()[1]
            total = price * quantity
            order_total = order_total + total

            if not all([product_id, quantity, price]):
                print('–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ–∫—É')
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–ø–æ–ª–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏

            try:
                cursor.execute(
                    "INSERT INTO order_items (order_id, product_id, quantity, price) VALUES (%s, %s, %s, %s);",
                    (order_id, product_id, quantity, price)
                )
            except Exception as e:
                return jsonify({"error": str(e)}), 500

        cursor.execute("""
            UPDATE orders
            SET total = """ +str(order_total)+ """
            WHERE id = """ + str(order_id), ()
        )
        conn.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        cursor.close()
        conn.close()

        return jsonify({"message": "Order created successfully", "order_id": order_id}), 201

    except Exception as e:
        return jsonify({"error": str(e)}), 500






# ==============================================================
# --------------------------------------------------------------
def get_image_filepath(product_code, subprod_code, image_id):
    """
    –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –∫ –≤–∞–π–ª—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã images.
    –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ –ø—Ä–æ–ø–∏—Å–∞–Ω - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫ –∏ –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        product_code (str): –ö–æ–¥ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.
        subprod_code (str or None): –ö–æ–¥ –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å.
        image_id (int): ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ images.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        –°—Ç—Ä–æ–∫–∞ - –ø—É—Ç—å –∫ —Ñ–∞–π–ª –∏–ª–∏ –ü—É—Å—Ç–∞—è
    """

    if bDebug:
        print(f'+++get_image_filepath: product_code={product_code}, subprod_code={subprod_code}, image_id={image_id}')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å ID —Ç–æ–≤–∞—Ä–∞
    if not product_code:
        print(f"  * get_image_filepath error: No product code specified")
        return ""

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    try:
        conn = get_db_connection()
        conn.autocommit = False  # manual transactions
        cursor = conn.cursor()
    except Exception as e:
        print(f"  * get_image_filepath error: Database connection error: {str(e)}")

    
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    try:
        where_SP = ""
        where_ID = ""
        if subprod_code:
            where_SP = " AND subprod_code = "+subprod_code;
        if image_id:
            where_ID = " AND id = "+image_id;

        cursor.execute("SELECT id, COALESCE(image_path,'') FROM public.images WHERE product_code = %s" + where_SP + where_ID + ";",  (product_code,) )
        image_data = cursor.fetchone()
        
        cursor.close()
        conn.close()

        image_path = ''
        if image_data:
            print(f"    image_data: {image_data}")
            image_id   = image_data[0]
            image_path = image_data[1]

        
        if image_path == '':
            print(f"  * get_image_filepath: call for save_image_to_file")
            image_path = save_image_to_file(product_code, subprod_code, image_id)
            print(f"       -- recieved in return: {image_path}")

        return image_path


    except Exception as e:
        cursor.close()
        conn.close()
        print(f"  * get_image_filepath error: Database error (fetching image): {str(e)}")
        return ""
    


# ==============================================================
# --------------------------------------------------------------
def save_image_to_file(product_code, subprod_code, image_id):
    """
    –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã images –≤ —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ BYTEA –≤ —Ñ–∞–π–ª –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–µ image_path –≤ –ë–î.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        product_code (str): –ö–æ–¥ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.
        subprod_code (str or None): –ö–æ–¥ –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å.
        image_id (int): ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ images.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        dict: –û—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—Å–ø–µ—Ö–µ/–æ—à–∏–±–∫–µ.
    """
    if bDebug:
        print(f'+++save_image_to_file: product_code={product_code}, subprod_code={subprod_code}, image_id={image_id}')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å ID —Ç–æ–≤–∞—Ä–∞
    if not product_code:
        return {"error": "No product code specified"}, 400

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    try:
        conn = get_db_connection()
        conn.autocommit = False  # manual transactions
        cursor = conn.cursor()
    except Exception as e:
        return {"error": f"Database connection error: {str(e)}"}, 500

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    try:
        if subprod_code:
            print(f'    -save_image_to_file: SELECT img_data, product_code, subprod_code FROM public.images WHERE id = {image_id} AND product_code = {product_code} AND subprod_code = {subprod_code}')
            cursor.execute(
                "SELECT img_data, product_code, subprod_code FROM public.images WHERE id = %s AND product_code = %s AND subprod_code = %s;",
                (image_id, product_code, subprod_code)
            )
        else:
            print(f'    -save_image_to_file: SELECT img_data, product_code, subprod_code FROM public.images WHERE id = {image_id} AND product_code = {product_code}')
            cursor.execute(
                "SELECT img_data, product_code, subprod_code FROM public.images WHERE id = %s AND product_code = %s;",
                (image_id, product_code)
            )
        
        image_data = cursor.fetchone()
        
        if not image_data:
            cursor.close()
            conn.close()
            return {"error": "Image not found"}, 404

        img_data, db_prod_code, db_subprod_code = image_data

        if bDebug:
            print(f"    Image found: ID={image_id}, product_code={db_prod_code}, subprod_code={db_subprod_code}")

    except Exception as e:
        cursor.close()
        conn.close()
        return {"error": f"Database error (fetching image): {str(e)}"}, 500


   # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    try:
        # –ï—Å–ª–∏ img_data ‚Äî memoryview (PostgreSQL BYTEA), –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ bytes
        if isinstance(img_data, memoryview):
            img_bytes = img_data.tobytes()
        else:
            img_bytes = img_data  # —É–∂–µ bytes (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)

        if not img_bytes:
            raise ValueError("Image data is empty")

        file_extension = imghdr.what(None, h=img_bytes)
        if file_extension is None:
            file_extension = 'jpg'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        file_extension = f".{file_extension}"

        if bDebug:
            print(f"    Detected file type: {file_extension}")

    except Exception as e:
        cursor.close()
        conn.close()
        return {"error": f"Failed to determine image type: {str(e)}"}, 500


    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    upload_folder = '/app/static/images'  # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
    os.makedirs(upload_folder, exist_ok=True)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    if subprod_code:
        file_name = f"{product_code}_{subprod_code}_{image_id}{file_extension}"
    else:
        file_name = f"{product_code}_{image_id}{file_extension}"
    file_path = os.path.join(upload_folder, file_name)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
    try:
        with open(file_path, 'wb') as f:
            f.write(img_data)
        #if bDebug:
        print(f"    Image saved to file: {file_path}")
    except Exception as e:
        cursor.close()
        conn.close()
        return {"error": f"Failed to save image to file: {str(e)}"}, 500

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è image_path –≤ —Ç–∞–±–ª–∏—Ü–µ images
    try:
        cursor.execute(
            "UPDATE public.images SET image_path = %s, img_data='' WHERE id = %s;",
            (file_path, image_id)
        )
        conn.commit()
        if bDebug:
            print(f"    Image path updated in DB: {file_path}")
    except Exception as e:
        conn.rollback()
        cursor.close()
        conn.close()
        return {"error": f"Database error (updating path): {str(e)}"}, 500

    finally:
        cursor.close()
        conn.close()

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    response = {
        "message": "Image saved to file and path updated successfully",
        "image_id": image_id,
        "product_code": product_code,
        "file_path": file_path
    }
    if subprod_code:
        response["subprod_code"] = subprod_code

    return response, 200



def _fetch_image_paths_bulk(product_codes: List[str]) -> Dict[str, str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –¥–ª—è —Å–ø–∏—Å–∫–∞ product_code –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict: {product_code: image_path}
    """
    if not product_codes:
        return {}

    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor()

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º IN —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        placeholders = ','.join(['%s'] * len(product_codes))
        query = f"""
            SELECT product_code, COALESCE(image_path, '') AS image_path
            FROM public.images
            WHERE product_code IN ({placeholders})
              AND (subprod_code IS NULL OR subprod_code = '')
              AND image_path IS NOT NULL
            GROUP BY product_code, image_path  -- –Ω–∞ —Å–ª—É—á–∞–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        """
        cur.execute(query, product_codes)
        rows = cur.fetchall()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å
        image_map = {row[0]: row[1] for row in rows}

        # –î–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        missing_codes = [code for code in product_codes if code not in image_map]
        if missing_codes:
            log.debug(f"Missing images for {len(missing_codes)} products, calling save_image_to_file")
            for code in missing_codes:
                path = save_image_to_file(code, None, None)
                if path:
                    image_map[code] = path
                    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ–±–Ω–æ–≤–∏—Ç—å –ë–î
                    try:
                        cur.execute(
                            "INSERT INTO public.images (product_code, image_path) VALUES (%s, %s) "
                            "ON CONFLICT (product_code) WHERE subprod_code IS NULL DO UPDATE SET image_path = EXCLUDED.image_path",
                            (code, path)
                        )
                    except Exception as e:
                        log.warning(f"Failed to cache image path for {code}: {e}")

        conn.commit()
        return image_map

    except Exception as e:
        log.error(f"Error in _fetch_image_paths_bulk: {e}", exc_info=True)
        if conn:
            conn.rollback()
        return {}
    finally:
        if conn:
            conn.close()



# –ù–æ–≤—ã–π —Ä–æ—É—Ç –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
@app.route('/images/<path:filename>')  # /images/data/images/product_123.jpg
def get_image(filename):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å path traversal (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
    if '..' in filename or filename.startswith('/'):
        return "Forbidden", 403
    return send_from_directory('/app/static/images', filename)  # –û—Ç–¥–∞—ë—Ç –∏–∑ volume



# ==============================================================
# --------------------------------------------------------------
# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–ª–æ–∫–∞–ª—å–Ω–æ –∏–ª–∏ –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ)

if __name__ == "main":
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 5000)))  # –°–ª—É—à–∞–µ–º –≤—Å–µ IP, –ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî 5000

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ:

# Procfile
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: —É–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –≤—Ä–æ–¥–µ Railway, Heroku –∏ –¥—Ä.
# –ì–æ–≤–æ—Ä–∏—Ç —Å–∏—Å—Ç–µ–º–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: ¬´–≠—Ç–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∑–∞–ø—É—Å–∫–∞–π –µ–≥–æ —á–µ—Ä–µ–∑ python app.py¬ª.
# –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ web —É–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ —ç—Ç–æ –≤–µ–±-—Å–µ—Ä–≤–∏—Å, –∫–æ—Ç–æ—Ä—ã–π —Å–ª—É—à–∞–µ—Ç HTTP-–∑–∞–ø—Ä–æ—Å—ã.

# requirements.txt
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö Python-–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, –Ω—É–∂–Ω—ã—Ö –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞.
# –ö–æ–º–∞–Ω–¥–æ–π pip install -r requirements.txt —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –≤—Å–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.
# Railway –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —ç—Ç—É —É—Å—Ç–∞–Ω–æ–≤–∫—É –ø—Ä–∏ —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–∏.

# .env
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ–ø–∞–¥–∞—Ç—å –≤ –ø—É–±–ª–∏—á–Ω—ã–π –∫–æ–¥.
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π python-dotenv –¥–ª—è –ø–æ–¥–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥–µ.
# –ü–æ–∑–≤–æ–ª—è–µ—Ç —É–¥–æ–±–Ω–æ –º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–¥—Ä–µ—Å –ë–î) –±–µ–∑ –ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞.
# –í–∞–∂–Ω–æ: .env –¥–æ–±–∞–≤–ª—è—é—Ç –≤ .gitignore, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ–∫—Ä–µ—Ç—ã –≤ –ø—É–±–ª–∏—á–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π.

# flask-rlwai
