# flask-rlwai

import os
import psycopg2
import secrets
import time
import imghdr
import bcrypt
import base64
import logging
from flask import Flask, jsonify, request, send_from_directory
from psycopg2.extras import RealDictCursor
from datetime import datetime
from typing import Dict, List, Tuple, Optional
from functools import wraps
from dotenv import load_dotenv  # –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞


# –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ, –∞ –Ω–µ –≤ Railway ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
if os.environ.get("RAILWAY_ENVIRONMENT") is None:
    load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–∑–∞–º–µ–Ω–∞ print)
logging.basicConfig(level=logging.DEBUG)
log = logging.getLogger(__name__)

bDebug = False
bDebug2= False

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ ===
VALID_LANGS         = {'ua', 'pl', 'en', 'ru'}
VALID_CURRENCIES    = {'uah', 'pln', 'usd', 'eur'}
DEFAULT_LANG        = 'ua'
DEFAULT_CURRENCY    = 'uah'
DEFAULT_PAGE_LIMIT  = 50
MAX_PAGE_LIMIT      = 250
NO_IMAGE_MARKER     = "__NO_IMAGE__"  # –ú–∞—Ä–∫–µ—Ä: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç –∏ –Ω–µ –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å
UPLOAD_FOLDER       = "/app/static/images"

# === –¢–∏–ø–∏ ===
ImageKey        = Tuple[str, Optional[str]]  # (product_code, subprod_code)
ImagePathMap    = Dict[ImageKey, str]


app = Flask(__name__)

os.makedirs(UPLOAD_FOLDER, exist_ok=True)




# ==============================================================
# --------------------------------------------------------------
# üîê –ó–≤–∏—á–∞–π–Ω–∞ –±–∞–∑–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ —Ç–æ–∫–µ–Ω—ñ–≤

# USERS = {"admin": "1234"}
# TOKENS = {}  # token -> (username, expiry)
TOKEN_TTL = 172800  # 48 –≥–æ–¥–∏–Ω
# TOKENS["tokenstring"] = [user_id, user_login, user_name, token_expire_date]
TOKENS = {}



# ==============================================================
# --------------------------------------------------------------
# üíæ –§—É–Ω–∫—Ü—ñ—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î, –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∑ –∫–æ–∂–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç—É, –¥–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è –¥–æ –±–∞–∑–∏

def get_db_connection():
    db_url = os.getenv("DATABASE_URL")  # –ß–∏—Ç–∞–µ–º URL –±–∞–∑—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not db_url:
        raise RuntimeError("DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω–∞.")
    return psycopg2.connect(db_url)


# ==============================================================
# --------------------------------------------------------------
# üîê –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
def require_auth(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        auth = request.headers.get('Authorization', '')
        if not auth.startswith('Bearer '):
            return jsonify({"error": "Authorization header missing"}), 401

        token = auth.split(' ')[1]
        # user_data = TOKENS.get(token)
        if token in TOKENS:
            user_data = TOKENS[token]
        else:
            return jsonify({"error": "Invalid or expired token"}), 401

        # if not user_data:
        #    return jsonify({"error": "Invalid or expired token"}), 401

        # username, expiry = user_data
        user_id, user_login, user_name, token_expire_date = user_data

        if time.time() > token_expire_date:
            del TOKENS[token]
            return jsonify({"error": "Token expired"}), 401

        request.user_id     = user_id
        request.user_login  = user_login
        request.user_name   = user_name

        return f(*args, **kwargs)

    return decorated


# --------------------------------------------------------------
# üîê –¢–æ—á–∫–∞ –≤—Ö–æ–¥—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É
@app.route('/login', methods=['POST'])
def login():

    if bDebug:
        print('+++ Login')

    data = request.get_json()
    if not data:
        return jsonify({"error": "Invalid JSON"}), 400

    username = data.get('username', '').lower()
    password = data.get('password', '').lower()

    if not username or not password:
        return jsonify({"error": "Missing username or password"}), 400

    if bDebug2:
        print(f'    username: {username}; password: {password}')

    try:
        conn = get_db_connection()
        cur = conn.cursor()

        sql = """
            select usr.id, usr.login, usr.first_name, usr.last_name, usr.phone
            from customers usr
            where   usr.enabled = true 
                and usr.login = %s 
                and usr.phrase = %s"""

        params = [username, password]
        cur.execute(sql, params)
        row = cur.fetchone()
        rows_count = cur.rowcount

        if bDebug2:
            print(f'    data fetched: {row}')

        if rows_count == 1:
            token = secrets.token_hex(16)
            TOKENS[token] = [row[0], row[1], row[2] + " " + row[3], time.time() + TOKEN_TTL]
            cur.close()
            conn.close()
            if bDebug:
                print('    TOKEN Result: ', TOKENS[token])
            
            return jsonify(
                {
                    "token" : token,
                    "user"  : row[2] + " " + row[3],
                    "phone" : row[4]
                })

        else:
            cur.close()
            conn.close()
            return jsonify({"error": "Invalid credentials"}), 401

    except Exception as e:
        #cur.close()
        #conn.close()
        return jsonify({"error": str(e)}), 500  # –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞

    # if USERS.get(username) != password:
    #     return jsonify({"error": "Invalid credentials"}), 401

    # token = secrets.token_hex(16)
    # TOKENS[token] = (username, time.time() + TOKEN_TTL)

    # return jsonify({"token": token})


# ==============================================================
# --------------------------------------------------------------
@app.route("/languages")
@require_auth
def get_languages():

    print(f'+++/languages: user: {str(request.user_id)}')

    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("SELECT code, title FROM public.languages ORDER BY title;")
        rows = cur.fetchall()
        rows_count = cur.rowcount
        cur.close()
        conn.close()

        datarows = [
            {"code": row[0].strip(), "title": row[1]}
            for row in rows
        ]

        data = {
            "count": rows_count,
            "languages": datarows
        }

        return jsonify(data), 200

    except Exception as e:
        return jsonify({"error": str(e)}), 500


# ==============================================================
# --------------------------------------------------------------
@app.route("/currencies")
@require_auth
def get_currencies():

    print(f'+++/currencies: user: {str(request.user_id)}')

    lang = request.args.get('lang', 'ua').lower()
    if lang not in ['ua', 'pl', 'en', 'ru']:
        lang = 'ua'

    col_title = 'title_' + lang

    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("SELECT code, " + col_title + " FROM public.currencies ORDER BY code;")

        rows = cur.fetchall()
        rows_count = cur.rowcount
        cur.close()
        conn.close()

        datarows = [
            {"code": row[0].strip(), "title": row[1]}
            for row in rows
        ]

        data = {
            "count": rows_count,
            "currencies": datarows
        }

        return jsonify(data), 200

    except Exception as e:
        return jsonify({"error": str(e)}), 500


# ==============================================================
# --------------------------------------------------------------
# üìó –ó–∞–ø–∏—Ç —Ç–æ–≤–∞—Ä–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
@app.route("/categories")
@require_auth
def get_categories():

    bDebug = True

    if bDebug:
        print(f'+++ Get Categories: user: {str(request.user_id)}')

    lang = request.args.get('lang', 'ua').lower()
    if lang not in ['ua', 'pl', 'en', 'ru']:
        lang = 'ua'

    col_title = 'title_' + lang

    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("""
            SELECT 
              c.id, 
              c.code, 
              c.""" + col_title + """, 
              COUNT(p.id) as ProductCount
            FROM 
                Categories c
            LEFT JOIN 
                Products p ON c.code = p.category_code
            GROUP BY 
                c.id, c."""+col_title+""" 
            ORDER BY c.code;""")

        rows = cur.fetchall()
        rows_count = cur.rowcount
        cur.close()
        conn.close()

        if bDebug2:
            print(f'    data fetched: {str(rows_count)} rows')

        datarows = [
            {"id": row[0], "code": row[1].strip(), "title": row[2], "prod_count": row[3]}
            for row in rows
        ]

        data = {
            "count": rows_count,
            "categories": datarows
        }

        return jsonify(data), 200

    except Exception as e:
        return jsonify({"error": str(e)}), 500


# ==============================================================
# --------------------------------------------------------------
# üì¶ –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ [GET]
#    –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–µ—Ä–µ–ª—ñ–∫ —Ç–æ–≤–∞—Ä—ñ–≤.
#    –¢–∞–∫–æ–∂, –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ñ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–¥–ø–æ—Ä—è–¥–∫–æ–≤–∏–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤.
# –ö–æ–≥–¥–∞ —Ç—ã —Å—Ç—É—á–∏—à—å—Å—è –∫ –∞–ø–ø–∫–µ GET-–∑–∞–ø—Ä–æ—Å–æ–º –ø–æ –∞–¥—Ä–µ—Å—É https://<–∞–ø–ø–∫–∞>/products
# —Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–ø–∏—Å–∞–Ω–∞ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ä–æ—É—Ç–∞ "@app.route('/products', methods=['GET'])"
# –í –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ - get_products()
# –¢–∞–∫ –≤–æ —Ñ–ª–∞—Å–∫–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ –≤—Å—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è
@app.route('/products', methods=['GET'])
@require_auth
def get_products():

    user_id = request.user_id
    log.debug(f"+++/products: user: {user_id}")

    # === –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø–∞—Ä—Å–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ===
    try:
        req_start = max(0, int(request.args.get('start', 0)))
        req_limit = min(MAX_PAGE_LIMIT, max(1, int(request.args.get('limit', DEFAULT_PAGE_LIMIT))))  # –æ–≥—Ä–∞–Ω–∏—á–∏–º —Å–≤–µ—Ä—Ö—É
    except ValueError:
        return jsonify({"error": "Invalid start or limit"}), 400
    
    req_category = request.args.get('category', '').strip().lower()
    if len(req_category) > 50:  # –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
        return jsonify({"error": "Category too long"}), 400
    
    req_currency = request.args.get('currency', DEFAULT_CURRENCY).lower()
    if req_currency not in VALID_CURRENCIES:
        req_currency = DEFAULT_CURRENCY
    
    req_lang = request.args.get('lang', DEFAULT_LANG).lower()
    if req_lang not in VALID_LANGS:
        req_lang = DEFAULT_LANG
    
    col_title = f"title_{req_lang}"
    col_descr = f"descr_{req_lang}"

    log.debug(f"Params: start={req_start}, limit={req_limit}, category={req_category}, currency={req_currency}, lang={req_lang}")



    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor(cursor_factory=RealDictCursor)  # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict

        # -- –≤–∞–∂–Ω–æ: —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤ –∑–∞–ø—Ä–æ—Å–µ
        base_sql = f"""
            SELECT 
                p.id AS product_id,
                c.code AS category_name,
                p.{col_title} AS product_title,
                p.{col_descr} AS product_descr,
                COALESCE(pl.price, 0) AS price,
                COALESCE(pl.stock_quantity, 0) AS quantity,
                p.code AS product_code,
                p.is_variative
            FROM products p
            LEFT JOIN categories c ON p.category_code = c.code
            LEFT JOIN price_list pl ON p.code = pl.product_code AND pl.currency_code = %s
            WHERE p.is_active = TRUE  
        """
        params = [req_currency]

        if req_category:
            base_sql += " AND c.code = %s"
            params.append(req_category)

        base_sql += f" ORDER BY c.code, p.{col_title} LIMIT %s OFFSET %s"
        params.extend([req_limit, req_start])

        
        cur.execute(base_sql, params)
        rows = cur.fetchall()
        total_fetched = len(rows)

        log.debug(f"    Fetched {total_fetched} products from DB")


        # === –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º ===
        items = [(row['product_code'], None) for row in rows]  # subprod_code = None
        image_map = _fetch_image_paths_bulk(items)
        

       # === –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ ===
        products = []
        for row in rows:
            code = row['product_code']
            products.append({
                'id'            : row['product_id'],
                'category'      : row['category_name'] or '',
                'title'         : row['product_title'] or '',
                'description'   : row['product_descr'] or '',
                'price'         : float(row['price']),
                'quantity'      : int(row['quantity']),
                'image'         : image_map.get((code, None), ''),
                'measure'       : '',
                'is_variative'  : bool(row['is_variative'])
            })

        response = {
            "currency"  : req_currency,
            "count"     : total_fetched,
            "start"     : req_start,
            "limit"     : req_limit,
            "products"  : products
        }

        return jsonify(response), 200

    except Exception as e:
        log.error(f"Error in get_products: {e}", exc_info=True)
        return jsonify({"error": "Internal server error"}), 500
    finally:
        if conn:
            conn.close()
    



# --------------------------------------------------------------
# üì¶ –ó–∞–ø–∏—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É
def _parse_product_str(product_str: str) -> Tuple[Optional[int], Optional[str]]:
    """
    –†–∞–∑–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ "123" –∏–ª–∏ "123|VAR001"
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (product_id, subprod_code)
    """
    if not product_str:
        return None, None

    parts = product_str.strip().split('|', 1)
    try:
        product_id = int(parts[0])
    except ValueError:
        return None, None

    subprod_code = parts[1] if len(parts) > 1 and parts[1].strip() else None
    return product_id, subprod_code


@app.route('/products/<string:product_str>', methods=['GET'])
@require_auth
def get_product(product_str: str):
    user_id = request.user_id
    log.debug(f"+++/products/{product_str}: user: {user_id}")

    # === 1. –ü–∞—Ä—Å–∏–Ω–≥ product_str ===
    product_id, subprod_code = _parse_product_str(product_str)
    if product_id is None:
        return jsonify({"error": "Invalid product identifier"}), 400

    log.debug(f"Parsed: product_id={product_id}, subprod_code={subprod_code}")

    # === 2. –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ===
    req_currency = request.args.get('currency', DEFAULT_CURRENCY).lower()
    if req_currency not in VALID_CURRENCIES:
        req_currency = DEFAULT_CURRENCY

    req_lang = request.args.get('lang', DEFAULT_LANG).lower()
    if req_lang not in VALID_LANGS:
        req_lang = DEFAULT_LANG

    col_title = f"title_{req_lang}"
    col_descr = f"descr_{req_lang}"

    # === 3. –ó–∞–ø—Ä–æ—Å —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ –ø–æ product_id) ===
    conn = None
    try:
        conn = get_db_connection()
        cur = conn.cursor(cursor_factory=RealDictCursor)

        sql = f"""
            SELECT 
                p.id,
                p.code AS product_code,
                c.id AS category_id,
                c.code AS category,
                p.is_active,
                p.{col_title} AS title,
                p.{col_descr} AS description,
                p.updated_at,
                COALESCE(pl.price, 0) AS price,
                COALESCE(pl.stock_quantity, 0) AS quantity
            FROM products p
            LEFT JOIN categories c ON p.category_code = c.code
            LEFT JOIN price_list pl ON p.code = pl.product_code AND pl.currency_code = %s
            WHERE p.id = %s AND p.is_active = TRUE
        """
        cur.execute(sql, (req_currency, product_id))
        row = cur.fetchone()

        if not row:
            return jsonify({"error": "Product not found"}), 404

        product_code = row['product_code']

        # === 4. –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ _fetch_image_paths_bulk ===
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–µ
        main_key = (product_code, subprod_code)  # –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: subprod_code
        fallback_key = (product_code, None)

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±–∞ (–∏–ª–∏ –æ–¥–∏–Ω)
        image_keys = [main_key]
        if subprod_code:
            image_keys.append(fallback_key)  # –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ subprod_code ‚Üí –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É

        image_map = _fetch_image_paths_bulk(image_keys)

        # –ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        main_image = image_map.get(main_key) or image_map.get(fallback_key, '')

        # –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–æ—Å–Ω–æ–≤–Ω—ã–µ + –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω—ã–µ)
        all_images = []
        # –û—Å–Ω–æ–≤–Ω–æ–µ
        if image_map.get(fallback_key):
            all_images.append(image_map[fallback_key])
        # –í–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if subprod_code and image_map.get(main_key):
            all_images.append(image_map[main_key])

        # === 5. –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç ===
        response = {
            "id": row['id'],
            "product_code": product_code,
            "category_id": row['category_id'],
            "category": row['category'],
            "active": row['is_active'],
            "title": row['title'] or '',
            "description": row['description'] or '',
            "price": float(row['price']),
            "quantity": int(row['quantity']),
            "image": main_image,
            "images": all_images,
            "updated_at": row['updated_at'].isoformat() if row['updated_at'] else None
        }

        if subprod_code:
            response["subprod_code"] = subprod_code

        return jsonify(response), 200

    except Exception as e:
        log.error(f"Error in get_product: {e}", exc_info=True)
        return jsonify({"error": "Internal server error"}), 500
    finally:
        if conn:
            conn.close()
    


# ==============================================================
# --------------------------------------------------------------
# üõí –ó–∞–ø–∏—Ç –∫–æ—à–∏–∫–∞
@app.route("/cart")
@require_auth
def get_cart():
    # print('request.user_id : ', request.user_id)

    # –±–∞–∂–∞–Ω–∞ –º–æ–≤–∞, –∞–±–æ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞
    req_lang = request.args.get('lang', 'ua').lower()
    if req_lang not in ['ua', 'pl', 'en', 'ru']:
        req_lang = 'ua'

    # –±–∞–∂–∞–Ω–∞ –≤–∞–ª—é—Ç–∞, –∞–±–æ —î–≤—Ä–æ
    req_currency = request.args.get('currency', 'uah').lower()

    # –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∞ –Ω–∞–∑–≤–∞ –∫–æ–ª–æ–Ω–æ–∫
    col_title = 'title_' + req_lang
    col_descr = 'descr_' + req_lang

    try:
        conn = get_db_connection()
        cur = conn.cursor()
        # cur.execute("SELECT id, code, " + col_title + " FROM public.categories ORDER BY id;")

        sql = """
            select 
                c.id,
                c.customer_id,
                c.product_id,
                pr.category_id,
                cat.code,
                pr.""" + col_title + """ as title,
                pr.""" + col_descr + """ as description,
                i.img_data,
                c.quantity,
                pl.price,
                c.quantity * pl.price as summ 
            from carts c 
            inner join products pr ON pr.id = c.product_id
            inner join price_list pl ON pl.product_id = c.product_id AND pl.currency_code = '""" + req_currency + """'
            inner join categories cat ON cat.id = pr.category_id
            left join images i ON i.product_id = c.product_id
            where c.customer_id = """ + str(request.user_id)

        cur.execute(sql)

        rows = cur.fetchall()
        rows_count = cur.rowcount
        cur.close()
        conn.close()

        # –ü—Ä–∏–∫–ª–∞–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ:
        # {
        #     "count"   : 1,
        #     "total"   : 2.5,
        #     "products": [
        #         {
        #             "id"          : 719,
        #             "category"    : "cat_profile",
        #             "title"       : "–ü—Ä–æ—Ñ—ñ–ª—å –¥–ª—è 2-—Ö —Ä—ñ–≤–Ω–µ–≤–æ—ó —Å—Ç–µ–ª—ñ –ø—ñ–¥ 45¬∞ 2,5 –º",
        #             "image"       : "storage\images\719-1.jpg",
        #             "measure"     : "—à—Ç.",
        #             "quantity"    : 1,
        #             "price"       : 2.5
        #             "summ"        : 2.5

        #         }
        #     ]
        # }

        total_summ = 0
        productsdata = []

        for row in rows:
            productsdata.append(
                {"id": row[2],
                 "category": row[4],
                 "title": row[5],
                 "image": row[7],
                 "measure": "—à—Ç.",
                 "quantity": row[8],
                 "price": row[9],
                 "summ": row[10]
                 }
            )

            total_summ = total_summ + row[10]

        data = {
            "count": rows_count,
            "total": total_summ,
            "products": productsdata
        }

        return jsonify(data), 200

    except Exception as e:
        return jsonify({"error": str(e)}), 500


# ==============================================================
# --------------------------------------------------------------
@app.route('/orders', methods=['GET'])
@require_auth
def get_orders():
    # –±–∞–∂–∞–Ω–∞ –º–æ–≤–∞, –∞–±–æ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞
    req_lang = request.args.get('lang', 'ua').lower()
    if req_lang not in ['ua', 'pl', 'en', 'ru']:
        req_lang = 'ua'

    # –±–∞–∂–∞–Ω–∞ –≤–∞–ª—é—Ç–∞, –∞–±–æ —î–≤—Ä–æ
    req_currency = request.args.get('currency', 'uah').lower()

    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        # –ó–∞–ø—Ä–æ—Å —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–æ–≤ –∏ –∏—Ö –ø–æ–∑–∏—Ü–∏–π
        cursor.execute("""
            SELECT 
                o.id,
                o.order_date,  
                o.invoice_date, 
                o.invoice_number,
                o.delivery_date, 
                o.total,
                o.status
            FROM orders o
            WHERE o.customer_id = """ + str(request.user_id) )

        orders = cursor.fetchall()

        orders_list = []

        for ordr in orders:
            orders_list.append(
                {   "id"            : ordr[0],
                    "TTN"           : ordr[3],
                    "date_ordered"  : ordr[1],
                    "date_delivered": ordr[4],
                    "status"        : ordr[6],
                    "summ"          : ordr[5]
                })

        cursor.close()
        conn.close()
        return jsonify(
            {   "count"     : len(orders_list),
                "orders"    : orders_list,  }), 200

    except Exception as e:
        return jsonify({"error": str(e)}), 500




# ==============================================================
# --------------------------------------------------------------
@app.route('/orders/<int:order_id>', methods=['GET'])
@require_auth
def get_order(order_id):
    # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—ñ—Å—Ç—å –ê–π–î–∏ —Ç–æ–≤–∞—Ä—É
    # order_id = request.args.get('order_id', 0)
    if order_id == 0:
        return jsonify({"message": "No product ID specified"}), 400

    # –±–∞–∂–∞–Ω–∞ –º–æ–≤–∞, –∞–±–æ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞
    req_lang = request.args.get('lang', 'ua').lower()
    if req_lang not in ['ua', 'pl', 'en', 'ru']:
        req_lang = 'ua'

    col_title = 'title_' + req_lang


    # –±–∞–∂–∞–Ω–∞ –≤–∞–ª—é—Ç–∞, –∞–±–æ —î–≤—Ä–æ
    req_currency = request.args.get('currency', 'uah').lower()

    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        # –ó–∞–ø—Ä–æ—Å —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–æ–≤ –∏ –∏—Ö –ø–æ–∑–∏—Ü–∏–π
        cursor.execute("""
            SELECT 
                o.id, 
                o.customer_id, 
                o.invoice_date, 
                o.invoice_number, 
                o.total,
                o.status,
                oi.id as order_item_id, 
                oi.product_id, 
                oi.quantity, 
                oi.price,
                p.""" +col_title+ """ as product_name
            FROM orders o
            LEFT JOIN order_items oi ON o.id = oi.order_id
            LEFT JOIN products p ON p.id = oi.product_id 
            WHERE o.id = %s """, (order_id,))

        orders = cursor.fetchall()

        if orders:
            orders_list = []
            current_order_id = None
            for order in orders:

                order_id, customer_id, invoice_date, invoice_number, total, status, order_item_id, product_id, quantity, price, product_name = order

                if current_order_id != order_id:
                    # –≤–∂–µ —ñ–Ω—à–∏–π –ê–π–î—ñ, –æ—Ç–∂–µ —ñ–Ω—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.
                    if current_order_id is not None:
                        # —è–∫—â–æ –ø–æ—Ç–æ—á–Ω–∏–π –ê–π–î—ñ –Ω–µ –Ω—É–ª—å–æ–≤–∏–π, –¥–æ–¥–∞–º–æ –π–æ–≥–æ –¥–æ –º–∞—Å–∏–≤—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
                        orders_list.append(current_order_data)
                    # –ø–æ—á–Ω–µ–º—É –Ω–∞–∫–æ–ø–∏—á—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ –Ω–æ–≤–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                    current_order_data = {
                        "id": order_id,
                        "TTN": invoice_number,
                        "date_ordered": invoice_date,
                        "status": status,
                        "summ": total,
                        "items": []
                    }
                    current_order_id = order_id

                # –¥–æ–¥–∞–º–æ —Å—Ç—Ä–æ–∫—É —Ç–æ–≤–∞—Ä–∞ —É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                current_order_data["items"].append({
                    "order_item_id": order_item_id,
                    "product_id": product_id,
                    "product_name": product_name,
                    "quantity": quantity,
                    "price": price
                })

            orders_list.append(current_order_data)
            cursor.close()
            conn.close()
            return jsonify(
                {
                    "count": len(orders_list),
                    "orders": orders_list,

                }), 200

        cursor.close()
        conn.close()
        return jsonify({"message": "No orders found"}), 404

    except Exception as e:
        return jsonify({"error": str(e)}), 500


# ==============================================================
# --------------------------------------------------------------
@app.route('/orders/new', methods=['POST'])
@require_auth
def create_order():
    # –î–ª—è POST-–∑–∞–ø—Ä–æ—Å–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è –Ω–µ–º–Ω–æ–≥–æ –ø–æ –¥—Ä—É–≥–æ–º—É

    # 1. –ï—Å–ª–∏ –ø—Ä–∏–ª–µ—Ç–µ–ª–æ –∏–∑ –≤–µ–±-—Ñ–æ—Ä–º—ã –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Å–∞–π—Ç–∞, —Ç–∏–ø–∞
    # <form method="POST" action="/login">
    #   <input name="username">
    #   <input name="password">
    # </form>
    # —Ç–æ –ø–æ–ª—É—á–∞–µ–º –∏—Ö —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥—ã —Ç–∏–ø–∞ username = request.form.get('username')

    # 2. –ï—Å–ª–∏ –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏—Å–ª–∞–ª–∏ JSON, –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞—é—Ç –≤ REST-–∑–∞–ø—Ä–æ—Å–∞—Ö (—ç—Ç–æ –Ω–∞—à —Å–ª—É—á–∞–π), —Ç–∏–ø–∞
    # Content-Type: application/json:
    # {
    #   "username": "Doe",
    #   "password": "secret"
    # }
    # , —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º data = request.get_json(), –æ–Ω –æ—Ç–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∏ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ –Ω–µ–º—É –¥–∞–ª—å—à–µ –≤ –∫–æ–¥–µ
    # —Ç–∞–∫ - data['username']
    # –∏–ª–∏ —Ç–∞–∫ - data.get('username')

    data = request.get_json()

    if not data     or 'products' not in data   or 'currency' not in data   or not request.user_id:
        return jsonify({"error": "Missing data"}), 400  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö

    currency = data['currency']
    products = data['products']

    if not products or not isinstance(products, list):
        return jsonify({"error": "products list is required"}), 400  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã

    #WHERE
    #o.customer_id = """ + str(request.user_id) )


    try:
        conn = get_db_connection()
        conn.autocommit = False     # manual transactions
        cursor = conn.cursor()

        try:
            # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ ID
            cursor.execute(
                "INSERT INTO orders (customer_id, order_date, status, total) VALUES (%s, CURRENT_TIMESTAMP, 'new', 1) RETURNING id;",
                (str(request.user_id),)
            )
            order_id = cursor.fetchone()[0]
        except Exception as e:
            return jsonify({"error": str(e)}), 500

        order_total = 0

        for item in products:
            
            product_id  = item.get('id')
            quantity    = item.get('quantity')
            # price     = item.get('price')
            
            try:
                cursor.execute("""
                SELECT 
                    p.id,
                    pl.price
                FROM Products p
                INNER join price_list pl ON pl.product_id = p.id AND pl.currency_code = '""" +currency+ """'
                WHERE p.id = %s""", (product_id,))

                results = cursor.fetchone()
            except Exception as e:
                return jsonify({"error": str(e)}), 500

            print('Product Results 0: ', results[0])
            price = results[1]
            print('Product Results 1: ', price)
            #price = cursor.fetchone()[1]
            total = price * quantity
            order_total = order_total + total

            if not all([product_id, quantity, price]):
                print('–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ–∫—É')
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–ø–æ–ª–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏

            try:
                cursor.execute(
                    "INSERT INTO order_items (order_id, product_id, quantity, price) VALUES (%s, %s, %s, %s);",
                    (order_id, product_id, quantity, price)
                )
            except Exception as e:
                return jsonify({"error": str(e)}), 500

        cursor.execute("""
            UPDATE orders
            SET total = """ +str(order_total)+ """
            WHERE id = """ + str(order_id), ()
        )
        conn.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        cursor.close()
        conn.close()

        return jsonify({"message": "Order created successfully", "order_id": order_id}), 201

    except Exception as e:
        return jsonify({"error": str(e)}), 500






# ==============================================================
# --------------------------------------------------------------
def get_image_filepath(product_code, subprod_code, image_id):
    """
    –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –∫ –≤–∞–π–ª—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã images.
    –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ –ø—Ä–æ–ø–∏—Å–∞–Ω - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫ –∏ –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        product_code (str): –ö–æ–¥ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.
        subprod_code (str or None): –ö–æ–¥ –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å.
        image_id (int): ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ images.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        –°—Ç—Ä–æ–∫–∞ - –ø—É—Ç—å –∫ —Ñ–∞–π–ª –∏–ª–∏ –ü—É—Å—Ç–∞—è
    """

    if bDebug:
        print(f'+++get_image_filepath: product_code={product_code}, subprod_code={subprod_code}, image_id={image_id}')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å ID —Ç–æ–≤–∞—Ä–∞
    if not product_code:
        print(f"  * get_image_filepath error: No product code specified")
        return ""

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    try:
        conn = get_db_connection()
        conn.autocommit = False  # manual transactions
        cursor = conn.cursor()
    except Exception as e:
        print(f"  * get_image_filepath error: Database connection error: {str(e)}")

    
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    try:
        where_SP = ""
        where_ID = ""
        if subprod_code:
            where_SP = " AND subprod_code = "+subprod_code;
        if image_id:
            where_ID = " AND id = "+image_id;

        cursor.execute("SELECT id, COALESCE(image_path,'') FROM public.images WHERE product_code = %s" + where_SP + where_ID + ";",  (product_code,) )
        image_data = cursor.fetchone()
        
        cursor.close()
        conn.close()

        image_path = ''
        if image_data:
            print(f"    image_data: {image_data}")
            image_id   = image_data[0]
            image_path = image_data[1]

        
        if image_path == '':
            print(f"  * get_image_filepath: call for save_image_to_file")
            image_path = save_image_to_file(product_code, subprod_code, image_id)
            print(f"       -- recieved in return: {image_path}")

        return image_path


    except Exception as e:
        cursor.close()
        conn.close()
        print(f"  * get_image_filepath error: Database error (fetching image): {str(e)}")
        return ""
    


# ==============================================================
# --------------------------------------------------------------
def save_image_to_file( product_code: str,   subprod_code: Optional[str],   image_id: int,   img_data: bytes ) -> str:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç BYTEA –≤ —Ñ–∞–π–ª –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç image_path –≤ –ë–î.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ ''.
    """

    try:
        # --- 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ ---
        file_ext = imghdr.what(None, h=img_data)
        file_ext = f".{file_ext}" if file_ext else ".jpg"

        # --- 2. –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å ---
        suffix = f"_{subprod_code}" if subprod_code else ""
        filename = f"{product_code}{suffix}_{image_id}{file_ext}"
        file_path = os.path.join(UPLOAD_FOLDER, filename)

        # --- 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ –¥–∏—Å–∫ ---
        with open(file_path, "wb") as f:
            f.write(img_data)

        # --- 4. –û–±–Ω–æ–≤–ª—è–µ–º –ë–î ---
        conn = get_db_connection()
        try:
            with conn.cursor() as cur:
                cur.execute("""
                    UPDATE public.images
                    SET image_path = %s, img_data = NULL
                    WHERE id = %s
                """, (file_path, image_id))
            conn.commit()
        except Exception as e:
            conn.rollback()
            log.warning(f"DB update failed for image {image_id}: {e}")
        finally:
            conn.close()

        log.debug(f"Image saved: {file_path}")
        return file_path

    except Exception as e:
        log.warning(f"Failed to save image {product_code}/{subprod_code} (id={image_id}): {e}")
        return ""




def _fetch_image_paths_bulk(  items: List[ImageKey]  ) -> ImagePathMap:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –¥–ª—è —Å–ø–∏—Å–∫–∞ [(product_code, subprod_code), ...].
    –°–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ is_primary DESC.
    """

    if not items:
        return {}

    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏
    unique_items = list(dict.fromkeys(items))
    conn = None
    try:
        conn = get_db_connection()
        with conn.cursor() as cur:

            # --- 1. –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å: —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ + —Å img_data –∏–ª–∏ –±–µ–∑ –ø—É—Ç–∏ ---
            placeholders = ','.join('(%s, %s)' for _ in unique_items)
            params = [code for code, sub in unique_items for code in [code, sub or '']]

            query = f"""
                SELECT 
                    product_code,
                    subprod_code,
                    image_path,
                    img_data,
                    id,
                    is_primary
                FROM public.images
                WHERE (product_code, COALESCE(subprod_code, '')) IN ({placeholders})
                  AND (
                    image_path IS NULL OR image_path = '' OR image_path = %s
                  )
                ORDER BY is_primary DESC, id
            """
            cur.execute(query, params + [NO_IMAGE_MARKER])
            rows = cur.fetchall()

        # --- 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ---
        result_map: ImagePathMap = {}
        to_save = []  # (id, code, sub, img_data)

        for code, sub, path, img_data, img_id, is_primary in rows:
            key: ImageKey = (code, sub if sub else None)

            # –ï—Å–ª–∏ –ø—É—Ç—å —É–∂–µ –µ—Å—Ç—å –∏ –Ω–µ –º–∞—Ä–∫–µ—Ä ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º
            if path and path != NO_IMAGE_MARKER and os.path.exists(path):
                result_map[key] = path
                continue

            # –ï—Å–ª–∏ –µ—Å—Ç—å img_data ‚Äî –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
            if img_data:
                if isinstance(img_data, memoryview):
                    img_data = img_data.tobytes()
                to_save.append((img_id, code, sub if sub else None, img_data))
            else:
                # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–µ—Ç –ø—É—Ç–∏ ‚Üí –º–∞—Ä–∫–µ—Ä
                result_map[key] = ''
                _mark_no_image(conn, img_id)

        # --- 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ---
        for img_id, code, sub, img_data in to_save:
            key: ImageKey = (code, sub)
            saved_path = save_image_to_file(code, sub, img_id, img_data)
            result_map[key] = saved_path or ''

        # --- 4. –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º '' (–∏ –º–∞—Ä–∫–µ—Ä –≤ –ë–î) ---
        for code, sub in unique_items:
            key: ImageKey = (code, sub)
            if key not in result_map:
                result_map[key] = ''
                # –ù–∞–π–¥—ë–º id –∏ –ø–æ–º–µ—Ç–∏–º
                img_id = _get_image_id(conn, code, sub)
                if img_id:
                    _mark_no_image(conn, img_id)

        return result_map

    except Exception as e:
        log.error(f"_fetch_image_paths_bulk error: {e}", exc_info=True)
        return {item: '' for item in unique_items}
    finally:
        if conn:
            conn.close()


def _get_image_id(conn, product_code: str, subprod_code: Optional[str]) -> Optional[int]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç id –∑–∞–ø–∏—Å–∏ –∏–ª–∏ None"""
    try:
        with conn.cursor() as cur:
            cur.execute("""
                SELECT id FROM public.images
                WHERE product_code = %s AND COALESCE(subprod_code, '') = %s
                LIMIT 1
            """, (product_code, subprod_code or ''))
            row = cur.fetchone()
            return row[0] if row else None
    except:
        return None


def _mark_no_image(conn, image_id: int):
    """–°—Ç–∞–≤–∏—Ç __NO_IMAGE__"""
    try:
        with conn.cursor() as cur:
            cur.execute("""
                UPDATE public.images SET image_path = %s WHERE id = %s
            """, (NO_IMAGE_MARKER, image_id))
        conn.commit()
    except:
        conn.rollback()
    



# –ù–æ–≤—ã–π —Ä–æ—É—Ç –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
@app.route('/images/<path:filename>')  # /images/data/images/product_123.jpg
def get_image(filename):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å path traversal (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
    if '..' in filename or filename.startswith('/'):
        return "Forbidden", 403
    return send_from_directory('/app/static/images', filename)  # –û—Ç–¥–∞—ë—Ç –∏–∑ volume



# ==============================================================
# --------------------------------------------------------------
# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–ª–æ–∫–∞–ª—å–Ω–æ –∏–ª–∏ –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ)

if __name__ == "main":
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 5000)))  # –°–ª—É—à–∞–µ–º –≤—Å–µ IP, –ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî 5000

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ:

# Procfile
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: —É–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –≤—Ä–æ–¥–µ Railway, Heroku –∏ –¥—Ä.
# –ì–æ–≤–æ—Ä–∏—Ç —Å–∏—Å—Ç–µ–º–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: ¬´–≠—Ç–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∑–∞–ø—É—Å–∫–∞–π –µ–≥–æ —á–µ—Ä–µ–∑ python app.py¬ª.
# –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ web —É–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ —ç—Ç–æ –≤–µ–±-—Å–µ—Ä–≤–∏—Å, –∫–æ—Ç–æ—Ä—ã–π —Å–ª—É—à–∞–µ—Ç HTTP-–∑–∞–ø—Ä–æ—Å—ã.

# requirements.txt
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö Python-–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, –Ω—É–∂–Ω—ã—Ö –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞.
# –ö–æ–º–∞–Ω–¥–æ–π pip install -r requirements.txt —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –≤—Å–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.
# Railway –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —ç—Ç—É —É—Å—Ç–∞–Ω–æ–≤–∫—É –ø—Ä–∏ —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–∏.

# .env
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ–ø–∞–¥–∞—Ç—å –≤ –ø—É–±–ª–∏—á–Ω—ã–π –∫–æ–¥.
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π python-dotenv –¥–ª—è –ø–æ–¥–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥–µ.
# –ü–æ–∑–≤–æ–ª—è–µ—Ç —É–¥–æ–±–Ω–æ –º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–¥—Ä–µ—Å –ë–î) –±–µ–∑ –ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞.
# –í–∞–∂–Ω–æ: .env –¥–æ–±–∞–≤–ª—è—é—Ç –≤ .gitignore, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ–∫—Ä–µ—Ç—ã –≤ –ø—É–±–ª–∏—á–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π.

# flask-rlwai
