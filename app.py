import os
import psycopg2    # PostgreSQL
import secrets
import time
import bcrypt
from flask import Flask, jsonify, request
from functools import wraps
from dotenv import load_dotenv    # –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞


# –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ, –∞ –Ω–µ –≤ Railway ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
if os.environ.get("RAILWAY_ENVIRONMENT") is None:
    load_dotenv()

app = Flask(__name__)




# ==============================================================
# --------------------------------------------------------------
# üîê –ó–≤–∏—á–∞–π–Ω–∞ –±–∞–∑–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ —Ç–æ–∫–µ–Ω—ñ–≤
USERS = {"admin": "1234"}
TOKENS = {}  # token -> (username, expiry)
TOKEN_TTL = 172800  # 48 –≥–æ–¥–∏–Ω



# --------------------------------------------------------------
# üîê –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó

def require_auth(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        auth = request.headers.get('Authorization', '')
        if not auth.startswith('Bearer '):
            return jsonify({"error": "Authorization header missing"}), 401

        token = auth.split(' ')[1]
        user_data = TOKENS.get(token)

        if not user_data:
            return jsonify({"error": "Invalid or expired token"}), 401

        username, expiry = user_data
        if time.time() > expiry:
            del TOKENS[token]
            return jsonify({"error": "Token expired"}), 401

        request.user = username
        return f(*args, **kwargs)
    return decorated



# --------------------------------------------------------------
# üîê –¢–æ—á–∫–∞ –≤—Ö–æ–¥—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É
@app.route('/login', methods=['POST'])

def login():
    data = request.get_json()
    if not data:
        return jsonify({"error": "Invalid JSON"}), 400

    username = data.get("username")
    password = data.get("password")

    if not username or not password:
        return jsonify({"error": "Missing username or password"}), 400

    if USERS.get(username) != password:
        return jsonify({"error": "Invalid credentials"}), 401

    token = secrets.token_hex(16)
    TOKENS[token] = (username, time.time() + TOKEN_TTL)

    return jsonify({"token": token})





# ==============================================================
# --------------------------------------------------------------
# üíæ –§—É–Ω–∫—Ü—ñ—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î, –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∑ –∫–æ–∂–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç—É, –¥–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è –¥–æ –±–∞–∑–∏

def get_db_connection():
    db_url = os.getenv("DATABASE_URL")   # –ß–∏—Ç–∞–µ–º URL –±–∞–∑—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not db_url:
        raise RuntimeError("DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω–∞.")
    return psycopg2.connect(db_url)




# ==============================================================
# --------------------------------------------------------------
# üì¶ –ó–∞–ø–∏—Ç —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä—ñ–≤
# –ö–æ–≥–¥–∞ —Ç—ã —Å—Ç—É—á–∏—à—å—Å—è –∫ –∞–ø–ø–∫–µ GET-–∑–∞–ø—Ä–æ—Å–æ–º –ø–æ –∞–¥—Ä–µ—Å—É https://<–∞–ø–ø–∫–∞>/products
# —Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–ø–∏—Å–∞–Ω–∞ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ä–æ—É—Ç–∞ "@app.route('/products', methods=['GET'])" 
# –í –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ - get_products()
# –¢–∞–∫ –≤–æ —Ñ–ª–∞—Å–∫–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ –≤—Å—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è
@app.route('/products', methods=['GET'])
@require_auth

def get_products():
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    # —ç—Ç–æ –∏–º–µ–Ω–Ω–æ GET-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã - request.args.get(param name)
    # –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å POST –æ–ø–∏—Å–∞–ª –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ö –≤ create_order()

    req_start = request.args.get('start')
    req_limit = request.args.get('limit')

    req_category = request.args.get('category')
    #category_type = type(req_category)
    
        
    req_currency = request.args.get('currency', 'uah')
    req_currency = req_currency.lower()
    if req_currency == '':
        req_currency = 'uah'
        
    req_lang = request.args.get('lang', 'ua')
    req_lang = req_lang.lower()
    if req_lang not in ['ua', 'pl', 'en', 'ru']:
        req_lang = 'ua'
    
    col_title = 'title_' + req_lang
    
    
    try:
        # –ó–∞–ø—Ä–æ—Å –∫ –ë–î
        conn = get_db_connection()
        cur = conn.cursor()
        
        sql = """
            SELECT 
                p.id AS product_id,
                c.code AS category_name,
                p.""" + col_title + """ AS product_title,
                pl.price,
                pl.stock_quantity
            FROM products p
            INNER JOIN categories c ON p.category_id = c.id
            INNER JOIN price_list pl ON p.id = pl.product_id AND pl.currency_code = %s"""
        
        # –≠—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∏—Ä–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã, –∑–∞—â–∏—Ç–∞ –æ—Ç –∏–Ω—ä–µ–∫—Ü–∏–π –≤ SQL
        # –í —Ç–µ–∫—Å—Ç–µ SQL —Å—Ç–∞–≤–∏—à—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–∏–ø–∞ %s –∏ –∫–æ–¥–æ–º "params = [currency, lang]" –∑–∞–ø–∏—Ö–∏–≤–∞–µ—à—å –∏—Ö –≤ —Å–ø–∏—Å–æ–∫
        #params = [currency, lang]
        params = [req_currency]
        
        if req_category:
            # –ò –¥–æ–±–∞–≤–ª—è–µ—à—å –≤ —Å–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ SQL-–∑–∞–ø—Ä–æ—Å–∞
            params.append(req_category)
            
            if isinstance(req_category, str) == True:
                sql += "    WHERE c.code = %s"
            else:
                sql += "    WHERE c.id = %s"
        
        sql += "    ORDER BY c.code, p."+col_title
        
        
        # –ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –ª–∏–±–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç –∏ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç —Ç–≤–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        cur.execute(sql, params)
        rows = cur.fetchall()
        rows_count = cur.rowcount
        
        # –ó–∞–ø–∏—Ö–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞ –≤ –≤—ã—Ö–æ–¥–Ω–æ–π –º–∞—Å—Å–∏–≤
        products = []
        for row in rows:
            products.append({
                'id': row[0],
                'category': row[1],
                'title': row[2],
                'description': '',
                'image': '',
                'measure': '',
                'quantity': row[4],
                'price': float(row[3])
            })
        
        
        # –î–∏—Å–∫–æ–Ω–Ω–µ–∫—Ç –∫ –ë–î
        cur.close()
        conn.close()
        
        
        data = {
            "currency"  : req_currency,
            "count"     : rows_count,
            "start"     : req_start,
            "limit"     : req_limit,
            "products"  : products 
        }
        
        # –ò–∑ –º–∞—Å—Å–∏–≤–æ–≤ python –¥–µ–ª–∞–µ—Ç –º–∞—Å—Å–∏–≤ JSON
        # –ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –æ—Ç–¥–∞—Ç—å –æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ {...}, —Ç–æ –ø–µ—Ä–µ–¥ jsonify() –º–æ–∂–µ—à—å –∑–∞–ø–∏—Ö–∞—Ç—å –µ–≥–æ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∏–ø–∞ 
        # response = {
        #     "result": "ok",
        #     "products": products
        # }
        # return jsonify(response), 200

        if products:
            return jsonify(data), 200
        
        return jsonify({"message": "No products found"})
        
    
    except Exception as e:
        return jsonify({"error": str(e)}), 500  # –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞




# --------------------------------------------------------------
# üì¶ –ó–∞–ø–∏—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É
@app.route('/products/<int:product_id>', methods=['GET'])
@require_auth

def get_product(product_id):
    
    # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—ñ—Å—Ç—å –ê–π–î–∏ —Ç–æ–≤–∞—Ä—É
    #product_id = request.args.get('product_id', 0)
    if product_id == 0:
        return jsonify({"message": "No product ID specified"}), 400
    
    # –±–∞–∂–∞–Ω–∞ –≤–∞–ª—é—Ç–∞, –∞–±–æ —î–≤—Ä–æ
    req_currency = request.args.get('currency', 'uah')
    req_currency = req_currency.lower()
    if req_currency == '':
        req_currency = 'uah'
    
    # –±–∞–∂–∞–Ω–∞ –º–æ–≤–∞, –∞–±–æ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞
    req_lang = request.args.get('lang', 'ua')
    req_lang = req_lang.lower()
    if req_lang not in ['ua', 'pl', 'en', 'ru']:
        req_lang = 'ua'
    # –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∞ –Ω–∞–∑–≤–∞ –∫–æ–ª–æ–Ω–æ–∫
    col_title = 'title_' + req_lang
    col_descr = 'descr_' + req_lang
    
    
    
    # 1
    # –æ—Ç—Ä–∏–º–∞—î–º–æ –¥–∞–Ω–Ω—ñ –ø—Ä–æ —Ç–æ–≤–∞—Ä
    try:
        # –ó–∞–ø–∏—Ç –¥–æ –ë–î
        conn = get_db_connection()
        cur = conn.cursor()
        sql = """
            select 
                p.id,
                p.category_id,
                c.code AS category,
                p.is_active as active,
                p."""+col_title+""" as title,
                p."""+col_descr+""" as description,
                p.updated_at,
                pl.price,
                pl.stock_quantity,
                i.img_data
            from Products p
            inner join categories c ON p.category_id = c.id
            inner join price_list pl ON pl.product_id = p.id AND pl.currency_code = '"""+req_currency+"""'
            left join images i ON i.product_id = p.id
            where p.id = %s"""
        
        
        cur.execute(sql, (product_id,))
        rows = cur.fetchall()
        rows_count = cur.rowcount
        
        # –î–∏—Å–∫–æ–Ω–Ω–µ–∫—Ç –≤—ñ–¥ –ë–î
        cur.close()
        conn.close()
        
    except Exception as e:
        return jsonify({"error (1): ": str(e)}), 500  # –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    
    
    # –º–∞—î –±—É—Ç–∏ –ª–∏—à–µ –æ–¥–∏–Ω!
    if rows_count == 0:
        return jsonify({"no records found"}), 500  # –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    
    if rows_count != 1:
        return jsonify({"records more than expected"}), 500  # –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    
    
    
    # 2
    # –æ—Ç—Ä–∏–º–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É
    try:
        # –ó–∞–ø–∏—Ç –¥–æ –ë–î
        conn = get_db_connection()
        cur = conn.cursor()
        sql = """
            select 
                i.img_data 
            from images i
            where i.product_id = %s
            order by i.id"""
        
        cur.execute(sql, (product_id,))
        img_rows = cur.fetchall()
        #img_count = cur.rowcount
        
        # –î–∏—Å–∫–æ–Ω–Ω–µ–∫—Ç –≤—ñ–¥ –ë–î
        cur.close()
        conn.close()
    
    except Exception as e:
        return jsonify({"error (2): ": str(e)}), 500  # –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    
    
    
    try:
        
        # –ó–∞–Ω–æ—Å–∏–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É –º–∞—Å–∏–≤
        images = []
        for row in img_rows:
            images.append({'image': row[0]})
        
        
        # –ó–∞–Ω–æ—Å–∏–º–æ –¥–∞–Ω–Ω—ñ
        first_row = rows[0]
        data = {
            "id"            : first_row[0],
            "category_id"   : first_row[1],
            "category"      : first_row[2],
            "active"        : first_row[3],
            "title"         : first_row[4],
            "description"   : first_row[5],
            "image"         : first_row[9],
            "quantity"      : first_row[8],
            "price"         : first_row[7],
            "images"        : images 
        }
        
        
        return jsonify(data), 200
        
        
    except Exception as e:
        return jsonify({"error (3): ": str(e)}), 500  # –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    
    
    
    
    
# ==============================================================
# --------------------------------------------------------------
@app.route('/orders', methods=['POST'])
@require_auth

def create_order():
    # –î–ª—è POST-–∑–∞–ø—Ä–æ—Å–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è –Ω–µ–º–Ω–æ–≥–æ –ø–æ –¥—Ä—É–≥–æ–º—É
    
    # 1. –ï—Å–ª–∏ –ø—Ä–∏–ª–µ—Ç–µ–ª–æ –∏–∑ –≤–µ–±-—Ñ–æ—Ä–º—ã –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Å–∞–π—Ç–∞, —Ç–∏–ø–∞
    # <form method="POST" action="/login">
    #   <input name="username">
    #   <input name="password">
    # </form>
    # —Ç–æ –ø–æ–ª—É—á–∞–µ–º –∏—Ö —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥—ã —Ç–∏–ø–∞ username = request.form.get('username')
    
    # 2. –ï—Å–ª–∏ –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏—Å–ª–∞–ª–∏ JSON, –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞—é—Ç –≤ REST-–∑–∞–ø—Ä–æ—Å–∞—Ö (—ç—Ç–æ –Ω–∞—à —Å–ª—É—á–∞–π), —Ç–∏–ø–∞
    # Content-Type: application/json:    
    # {
    #   "username": "Doe",
    #   "password": "secret"
    # }
    # , —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º data = request.get_json(), –æ–Ω –æ—Ç–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∏ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ –Ω–µ–º—É –¥–∞–ª—å—à–µ –≤ –∫–æ–¥–µ 
    # —Ç–∞–∫ - data['username']
    # –∏–ª–∏ —Ç–∞–∫ - data.get('username')
    
    data = request.get_json()
    
    if not data or 'customer_id' not in data or 'items' not in data:
        return jsonify({"error": "Missing data"}), 400  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö
    
    customer_id = data['customer_id']
    items = data['items']
    
    if not items or not isinstance(items, list):
        return jsonify({"error": "Items list is required"}), 400  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ ID
        cursor.execute(
            "INSERT INTO orders (customer_id, invoice_date) VALUES (%s, CURRENT_TIMESTAMP) RETURNING order_id;",
            (customer_id,)
        )
        order_id = cursor.fetchone()[0]
        
        for item in items:
            product_id = item.get('product_id')
            quantity = item.get('quantity')
            price = item.get('price')
            
            if not all([product_id, quantity, price]):
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–ø–æ–ª–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏

            cursor.execute(
                "INSERT INTO order_items (order_id, product_id, quantity, price) VALUES (%s, %s, %s, %s);",
                (order_id, product_id, quantity, price)
            )
            
        conn.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        cursor.close()
        conn.close()
        
        return jsonify({"message": "Order created successfully", "order_id": order_id}), 201
    
    except Exception as e:
        return jsonify({"error": str(e)}), 500




@app.route('/orders', methods=['GET'])
@require_auth

def get_orders():
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # –ó–∞–ø—Ä–æ—Å —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–æ–≤ –∏ –∏—Ö –ø–æ–∑–∏—Ü–∏–π
        cursor.execute("""
            SELECT o.order_id, o.customer_id, o.invoice_date, 
                   oi.order_item_id, oi.product_id, oi.quantity, oi.price,
                   pn.name as product_name
            FROM orders o
            LEFT JOIN order_items oi ON o.order_id = oi.order_id
            LEFT JOIN product_names pn ON oi.product_id = pn.product_id AND pn.lang_id = 'ua';
        """)

        orders = cursor.fetchall()

        if orders:
            orders_list = []
            current_order = None
            for order in orders:
                order_id, customer_id, invoice_date, order_item_id, product_id, quantity, price, product_name = order
                if current_order != order_id:
                    if current_order is not None:
                        orders_list.append(current_order_data)
                    current_order_data = {
                        "order_id": order_id,
                        "customer_id": customer_id,
                        "invoice_date": invoice_date,
                        "items": []
                    }
                    current_order = order_id

                current_order_data["items"].append({
                    "order_item_id": order_item_id,
                    "product_id": product_id,
                    "product_name": product_name,
                    "quantity": quantity,
                    "price": price
                })

            orders_list.append(current_order_data)
            cursor.close()
            conn.close()
            return jsonify({"orders": orders_list}), 200
        
        
        cursor.close()
        conn.close()
        return jsonify({"message": "No orders found"}), 404
    
    except Exception as e:
        return jsonify({"error": str(e)}), 500




# --------------------------------------------------------------
@app.route("/languages")
@require_auth

def get_languages():
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("SELECT code, title FROM public.languages ORDER BY title;")
        rows = cur.fetchall()
        rows_count = cur.rowcount
        cur.close()
        conn.close()

        datarows = [
            {"code": row[0].strip(), "title": row[1]}
            for row in rows
        ]

        data = {
            "count"     :   rows_count,
            "languages" :   datarows
        }
        
        return jsonify(data), 200

    except Exception as e:
        return jsonify({"error": str(e)}), 500




# --------------------------------------------------------------
@app.route("/currencies")
@require_auth

def get_currencies():

    lang = request.args.get('lang', 'ua')
    lang = lang.lower()
    if lang not in ['ua', 'pl', 'en', 'ru']:
        lang = 'ua'
    
    col_title = 'title_'+lang
    
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("SELECT code, " +col_title+ " FROM public.currencies ORDER BY code;")
        
        rows = cur.fetchall()
        rows_count = cur.rowcount
        cur.close()
        conn.close()

        datarows = [
            {"code": row[0].strip(), "title": row[1]}
            for row in rows
        ]
        
        data = {
            "count"     :   rows_count,
            "currencies":   datarows
        }
        
        return jsonify(data), 200

    except Exception as e:
        return jsonify({"error": str(e)}), 500




# ==============================================================
# --------------------------------------------------------------
# üìó –ó–∞–ø–∏—Ç —Ç–æ–≤–∞—Ä–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
@app.route("/categories")
@require_auth

def get_categories():

    lang = request.args.get('lang', 'ua')
    lang = lang.lower()
    if lang not in ['ua', 'pl', 'en', 'ru']:
        lang = 'ua'
    
    col_title = 'title_'+lang
    
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        #cur.execute("SELECT id, code, " + col_title + " FROM public.categories ORDER BY id;")
        cur.execute("""
            SELECT 
            	c.id, 
            	c.code, 
            	c.""" + col_title + """, 
            	COUNT(p.id) as ProductCount
            FROM 
                Categories c
            LEFT JOIN 
                Products p ON c.id = p.category_id
            GROUP BY 
                c.id, c.title_ru 
            ORDER BY c.id;""")

        
        rows = cur.fetchall()
        rows_count = cur.rowcount
        cur.close()
        conn.close()
        
        datarows = [
            {"id": row[0], "code": row[1].strip(), "title": row[2], "prod_count": row[3]}
            for row in rows
        ]
        
        data = {
            "count"     :   rows_count,
            "categories":   datarows
        }
        
        return jsonify(data), 200

    except Exception as e:
        return jsonify({"error": str(e)}), 500




# ==============================================================
# --------------------------------------------------------------
# üõí –ó–∞–ø–∏—Ç –∫–æ—à–∏–∫–∞
@app.route("/cart")
@require_auth

def get_cart():
    
    # –±–∞–∂–∞–Ω–∞ –º–æ–≤–∞, –∞–±–æ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞
    req_lang = request.args.get('lang', 'ua')
    req_lang = req_lang.lower()
    if req_lang not in ['ua', 'pl', 'en', 'ru']:
        req_lang = 'ua'
        
    # –±–∞–∂–∞–Ω–∞ –≤–∞–ª—é—Ç–∞, –∞–±–æ —î–≤—Ä–æ
    req_currency = request.args.get('currency', 'uah')
    req_currency = req_currency.lower()
    if req_currency == '':
        req_currency = 'uah'
    
    
    # –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∞ –Ω–∞–∑–≤–∞ –∫–æ–ª–æ–Ω–æ–∫
    col_title = 'title_' + req_lang
    col_descr = 'descr_' + req_lang
    
    
    
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        #cur.execute("SELECT id, code, " + col_title + " FROM public.categories ORDER BY id;")
        
        sql = """
            select 
                c.id,
                c.customer_id,
                c.product_id,
                pr.category_id,
                cat.code,
                pr."""+col_title+""" as title,
                pr."""+col_descr+""" as description,
                i.img_data,
                c.quantity,
                pl.price,
                c.quantity * pl.price as summ 
            from carts c 
            inner join products pr ON pr.id = c.product_id
            inner join price_list pl ON pl.product_id = c.product_id AND pl.currency_code = '"""+req_currency+"""'
            inner join categories cat ON cat.id = pr.category_id
            left join images i ON i.product_id = c.product_id
            where c.customer_id = 11"""
        
        cur.execute(sql)
        
        rows = cur.fetchall()
        rows_count = cur.rowcount
        cur.close()
        conn.close()
        
        # –ü—Ä–∏–∫–ª–∞–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ:
        # {
        #     "count"   : 1,
        #     "total"   : 2.5,
        #     "products": [
        #         {
        #             "id"          : 719,
        #             "category"    : "cat_profile",
        #             "title"       : "–ü—Ä–æ—Ñ—ñ–ª—å –¥–ª—è 2-—Ö —Ä—ñ–≤–Ω–µ–≤–æ—ó —Å—Ç–µ–ª—ñ –ø—ñ–¥ 45¬∞ 2,5 –º",
        #             "image"       : "storage\images\719-1.jpg",
        #             "measure"     : "—à—Ç.",
        #             "quantity"    : 1,
        #             "price"       : 2.5
        #             "summ"        : 2.5
                    
        #         }
        #     ]
        # }
        
        
        total_summ = 0
        
        for row in rows:
            
            productsdata = [
                {"id"       : row[2],
                 "category" : row[4].strip(),
                 "title"    : row[5].strip(),
                 "image"    : row[7],
                 "measure"  : "—à—Ç.",
                 "quantity" : row[8],
                 "price"    : row[9],
                 "summ"     : row[10]
                }
            ]
            
            total_summ = total_summ + row[10]
        
        
        data = {
            "count"     :   rows_count,
            "total"     :   total_summ,
            "products"  :   productsdata
        }
        
        return jsonify(data), 200

    except Exception as e:
        return jsonify({"error": str(e)}), 500



# ==============================================================
# --------------------------------------------------------------
# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–ª–æ–∫–∞–ª—å–Ω–æ –∏–ª–∏ –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ)

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 5000)))  # –°–ª—É—à–∞–µ–º –≤—Å–µ IP, –ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî 5000


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ:

# Procfile
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: —É–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –≤—Ä–æ–¥–µ Railway, Heroku –∏ –¥—Ä.
# –ì–æ–≤–æ—Ä–∏—Ç —Å–∏—Å—Ç–µ–º–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: ¬´–≠—Ç–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∑–∞–ø—É—Å–∫–∞–π –µ–≥–æ —á–µ—Ä–µ–∑ python app.py¬ª.
# –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ web —É–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ —ç—Ç–æ –≤–µ–±-—Å–µ—Ä–≤–∏—Å, –∫–æ—Ç–æ—Ä—ã–π —Å–ª—É—à–∞–µ—Ç HTTP-–∑–∞–ø—Ä–æ—Å—ã.

# requirements.txt
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö Python-–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, –Ω—É–∂–Ω—ã—Ö –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞.
# –ö–æ–º–∞–Ω–¥–æ–π pip install -r requirements.txt —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –≤—Å–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.
# Railway –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —ç—Ç—É —É—Å—Ç–∞–Ω–æ–≤–∫—É –ø—Ä–∏ —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–∏.

# .env
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ–ø–∞–¥–∞—Ç—å –≤ –ø—É–±–ª–∏—á–Ω—ã–π –∫–æ–¥.
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π python-dotenv –¥–ª—è –ø–æ–¥–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥–µ.
# –ü–æ–∑–≤–æ–ª—è–µ—Ç —É–¥–æ–±–Ω–æ –º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–¥—Ä–µ—Å –ë–î) –±–µ–∑ –ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞.
# –í–∞–∂–Ω–æ: .env –¥–æ–±–∞–≤–ª—è—é—Ç –≤ .gitignore, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ–∫—Ä–µ—Ç—ã –≤ –ø—É–±–ª–∏—á–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π.
